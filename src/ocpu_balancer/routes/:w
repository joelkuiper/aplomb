(ns ocpu-balancer.routes.api
  (:require [compojure.core :refer [context defroutes OPTIONS POST GET]]
            [ring.util.http-response :as http]
            [clj-http.client :as client]
            [taoensso.timbre :as timbre]
            [clojure.java.io :as io]))


(defn dissoc-in
  "Dissociates an entry from a nested associative structure returning a new
  nested structure. keys is a sequence of keys. Any empty maps that result
  will not be present in the new structure."
  [m [k & ks :as keys]]
  (if ks
    (if-let [nextmap (get m k)]
      (let [newmap (dissoc-in nextmap ks)]
        (if (seq newmap)
          (assoc m k newmap)
          (dissoc m k)))
      m)
    (dissoc m k)))

(def upstreams
  [{:uri "http://192.168.174.128" :cores 1}])

(defn queue
  [req]
  (let [upstream (get-in req [:query-params "f"])
        base (:uri (first upstreams))
        uri (str  base "/" upstream)
        upstream-req (dissoc-in req  [:headers "Content-Length"])]
    (client/post uri upstream-req)))

(defroutes api-routes
  (context "/api" []
           (POST "/" [:as req] (queue req))))
